{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack:///./node_modules/@babel/runtime/helpers/createClass.js","webpack:///./node_modules/@babel/runtime/helpers/defineProperty.js","webpack:///./node_modules/financial/dist/financial.esm.js","webpack:///./src/duration/calculator.js","webpack:///./src/duration/duration.js"],"names":["userLang","navigator","language","userLanguage","resultDiv","document","createElement","table","__","wp","i18n","Calculator","formEl","amount","parseFloat","querySelector","value","rate","currency","dataset","term","result","pmt","data","thead","createTHead","row","insertRow","key","th","text","createTextNode","appendChild","element","cell","insertCell","innerHTML","elm","parent","parentNode","className","heads","terms","forEach","y","push","years","recurring","formatNumber","payment","interests","total","generateTableHead","generateTable","after","val","toLocaleString","minimumFractionDigits","maximumFractionDigits","addEventListener","handleSubmitEvents","e","target","indexOf","preventDefault","stopPropagation","reportValidity","calculator","response"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;;AAEA;AACA,6E;;;;;;;;;;;ACPA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6E;;;;;;;;;;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,6E;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gCAAgC;AAChC,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;;AAEA;AACA,2DAA2D;;AAE3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,MAAM,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI,GAAG,OAAO,KAAK,SAAS,IAAI;AAC1C;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA,GAAG;;;AAGH,yBAAyB;;AAEzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI,EAAE,KAAK,OAAO,UAAU,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,iBAAiB,mBAAmB;AACpC;AACA;AACA;;AAEA;AACA;;AAE+E;AAC/E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9wBA;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","file":"duration.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/duration/duration.js\");\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/**\r\n * When payments are due\r\n *\r\n * @since v0.0.12\r\n */\nvar PaymentDueTime;\n\n(function (PaymentDueTime) {\n  /** Payments due at the beginning of a period (1) */\n  PaymentDueTime[\"Begin\"] = \"begin\";\n  /** Payments are due at the end of a period (0) */\n\n  PaymentDueTime[\"End\"] = \"end\"; // 0\n})(PaymentDueTime || (PaymentDueTime = {}));\n/**\r\n * Compute the future value.\r\n *\r\n * @param rate - Rate of interest as decimal (not per cent) per period\r\n * @param nper - Number of compounding periods\r\n * @param pmt - A fixed payment, paid either at the beginning or ar the end (specified by `when`)\r\n * @param pv - Present value\r\n * @param when - When payment was made\r\n *\r\n * @returns The value at the end of the `nper` periods\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the future value after 10 years of saving $100 now, with\r\n * an additional monthly savings of $100. Assume the interest rate is\r\n * 5% (annually) compounded monthly?\r\n *\r\n * ```javascript\r\n * import { fv } from 'financial'\r\n *\r\n * fv(0.05 / 12, 10 * 12, -100, -100) // 15692.928894335748\r\n * ```\r\n *\r\n * By convention, the negative sign represents cash flow out (i.e. money not\r\n * available today).  Thus, saving $100 a month at 5% annual interest leads\r\n * to $15,692.93 available to spend in 10 years.\r\n *\r\n * ## Notes\r\n *\r\n * The future value is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) == 0\r\n * ```\r\n *\r\n * or, when `rate == 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper == 0\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\n\nfunction fv(rate, nper, pmt, pv, when) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n\n  if (isRateZero) {\n    return -(pv + pmt * nper);\n  }\n\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  return -pv * temp - pmt * (1 + rate * whenMult) / rate * (temp - 1);\n}\n/**\r\n * Compute the payment against loan principal plus interest.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param nper - Number of compounding periods (e.g., number of payments)\r\n * @param pv - Present value (e.g., an amount borrowed)\r\n * @param fv - Future value (e.g., 0)\r\n * @param when - When payments are due\r\n *\r\n * @returns the (fixed) periodic payment\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the monthly payment needed to pay off a $200,000 loan in 15\r\n * years at an annual interest rate of 7.5%?\r\n *\r\n * ```javascript\r\n * import { pmt } from 'financial'\r\n *\r\n * pmt(0.075/12, 12*15, 200000) // -1854.0247200054619\r\n * ```\r\n *\r\n * In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\r\n * today, a monthly payment of $1,854.02 would be required.  Note that this\r\n * example illustrates usage of `fv` having a default value of 0.\r\n *\r\n * ## Notes\r\n *\r\n * The payment is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate*when) / rate * ((1 + rate) ** nper - 1) == 0\r\n * ```\r\n *\r\n * or, when `rate == 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper == 0\r\n * ```\r\n *\r\n * for `pmt`.\r\n *\r\n * Note that computing a monthly mortgage payment is only\r\n * one use for this function.  For example, `pmt` returns the\r\n * periodic deposit one must make to achieve a specified\r\n * future balance given an initial deposit, a fixed,\r\n * periodically compounded interest rate, and the total\r\n * number of periods.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\nfunction pmt(rate, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var maskedRate = isRateZero ? 1 : rate;\n  var fact = isRateZero ? nper : (1 + maskedRate * whenMult) * (temp - 1) / maskedRate;\n  return -(fv + pv * temp) / fact;\n}\n/**\r\n * Compute the number of periodic payments.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param pmt - Payment\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns The number of periodic payments\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * If you only had $150/month to pay towards the loan, how long would it take\r\n * to pay-off a loan of $8,000 at 7% annual interest?\r\n *\r\n * ```javascript\r\n * import { nper } from 'financial'\r\n *\r\n * Math.round(nper(0.07/12, -150, 8000), 5) // 64.07335\r\n * ```\r\n *\r\n * So, over 64 months would be required to pay off the loan.\r\n *\r\n * ## Notes\r\n *\r\n * The number of periods `nper` is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper-1) = 0\r\n * ```\r\n *\r\n * but if `rate = 0` then:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper = 0\r\n * ```\r\n */\n\nfunction nper(rate, pmt, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var isRateZero = rate === 0;\n\n  if (isRateZero) {\n    return -(fv + pv) / pmt;\n  }\n\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var z = pmt * (1 + rate * whenMult) / rate;\n  return Math.log((-fv + z) / (pv + z)) / Math.log(1 + rate);\n}\n/**\r\n * Compute the interest portion of a payment.\r\n *\r\n * @param rate - Rate of interest as decimal (not per cent) per period\r\n * @param per - Interest paid against the loan changes during the life or the loan. The `per` is the payment period to calculate the interest amount\r\n * @param nper - Number of compounding periods\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns Interest portion of payment\r\n *\r\n * @since v0.0.12\r\n *\r\n * ## Examples\r\n *\r\n * What is the amortization schedule for a 1 year loan of $2500 at\r\n * 8.24% interest per year compounded monthly?\r\n *\r\n * ```javascript\r\n * const principal = 2500\r\n * const periods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\r\n * const ipmts = periods.map((per) => f.ipmt(0.0824 / 12, per, 1 * 12, principal))\r\n * expect(ipmts).toEqual([\r\n *   -17.166666666666668,\r\n *   -15.789337457350777,\r\n *   -14.402550587464257,\r\n *   -13.006241114404524,\r\n *   -11.600343649629737,\r\n *   -10.18479235559687,\r\n *   -8.759520942678298,\r\n *   -7.324462666057678,\r\n *   -5.879550322604295,\r\n *   -4.424716247725826,\r\n *   -2.9598923121998877,\r\n *   -1.4850099189833388\r\n * ])\r\n * const interestpd = ipmts.reduce((a, b) => a + b, 0)\r\n * expect(interestpd).toBeCloseTo(-112.98308424136215, 6)\r\n * ```\r\n *\r\n * The `periods` variable represents the periods of the loan.  Remember that financial equations start the period count at 1!\r\n *\r\n * ## Notes\r\n *\r\n * The total payment is made up of payment against principal plus interest.\r\n *\r\n * ```\r\n * pmt = ppmt + ipmt\r\n * ```\r\n */\n\nfunction ipmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  // Payments start at the first period, so payments before that\n  // don't make any sense.\n  if (per < 1) {\n    return Number.NaN;\n  } // If payments occur at the beginning of a period and this is the\n  // first period, then no interest has accrued.\n\n\n  if (when === PaymentDueTime.Begin && per === 1) {\n    return 0;\n  }\n\n  var totalPmt = pmt(rate, nper, pv, fv, when);\n  var ipmtVal = _rbl(rate, per, totalPmt, pv, when) * rate; // If paying at the beginning we need to discount by one period\n\n  if (when === PaymentDueTime.Begin && per > 1) {\n    ipmtVal = ipmtVal / (1 + rate);\n  }\n\n  return ipmtVal;\n}\n/**\r\n * Compute the payment against loan principal.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param per - Amount paid against the loan changes.  The `per` is the period of interest.\r\n * @param nper - Number of compounding periods\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns the payment against loan principal\r\n *\r\n * @since v0.0.14\r\n */\n\nfunction ppmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var total = pmt(rate, nper, pv, fv, when);\n  return total - ipmt(rate, per, nper, pv, fv, when);\n}\n/**\r\n * Calculates the present value of an annuity investment based on constant-amount\r\n * periodic payments and a constant interest rate.\r\n *\r\n * @param rate - Rate of interest (per period)\r\n * @param nper - Number of compounding periods\r\n * @param pmt - Payment\r\n * @param fv - Future value\r\n * @param when - When payments are due\r\n *\r\n * @returns the present value of a payment or investment\r\n *\r\n * @since v0.0.15\r\n *\r\n * ## Examples\r\n *\r\n * What is the present value (e.g., the initial investment)\r\n * of an investment that needs to total $15692.93\r\n * after 10 years of saving $100 every month?  Assume the\r\n * interest rate is 5% (annually) compounded monthly.\r\n *\r\n * ```javascript\r\n * import { pv } from 'financial'\r\n *\r\n * pv(0.05/12, 10*12, -100, 15692.93) // -100.00067131625819\r\n * ```\r\n *\r\n * By convention, the negative sign represents cash flow out\r\n * (i.e., money not available today).  Thus, to end up with\r\n * $15,692.93 in 10 years saving $100 a month at 5% annual\r\n * interest, one's initial deposit should also be $100.\r\n *\r\n * ## Notes\r\n *\r\n * The present value is computed by solving the equation:\r\n *\r\n * ```\r\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) = 0\r\n * ```\r\n *\r\n * or, when `rate = 0`:\r\n *\r\n * ```\r\n * fv + pv + pmt * nper = 0\r\n * ```\r\n *\r\n * for `pv`, which is then returned.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\nfunction pv(rate, nper, pmt, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var fact = isRateZero ? nper : (1 + rate * whenMult) * (temp - 1) / rate;\n  return -(fv + pmt * fact) / temp;\n}\n/**\r\n * Compute the rate of interest per period\r\n *\r\n * @param nper - Number of compounding periods\r\n * @param pmt - Payment\r\n * @param pv - Present value\r\n * @param fv - Future value\r\n * @param when - When payments are due ('begin' or 'end')\r\n * @param guess - Starting guess for solving the rate of interest\r\n * @param tol - Required tolerance for the solution\r\n * @param maxIter - Maximum iterations in finding the solution\r\n *\r\n * @returns the rate of interest per period (or `NaN` if it could\r\n *  not be computed within the number of iterations provided)\r\n *\r\n * @since v0.0.16\r\n *\r\n * ## Notes\r\n *\r\n * Use Newton's iteration until the change is less than 1e-6\r\n * for all values or a maximum of 100 iterations is reached.\r\n * Newton's rule is:\r\n *\r\n * ```\r\n * r_{n+1} = r_{n} - g(r_n)/g'(r_n)\r\n * ```\r\n *\r\n * where:\r\n *\r\n * - `g(r)` is the formula\r\n * - `g'(r)` is the derivative with respect to r.\r\n *\r\n *\r\n * The rate of interest is computed by iteratively solving the\r\n * (non-linear) equation:\r\n *\r\n * ```\r\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper - 1) = 0\r\n * ```\r\n *\r\n * for `rate.\r\n *\r\n * ## References\r\n *\r\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\r\n */\n\nfunction rate(nper, pmt, pv, fv, when, guess, tol, maxIter) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n\n  var rn = guess;\n  var iterator = 0;\n  var close = false;\n\n  while (iterator < maxIter && !close) {\n    var rnp1 = rn - _gDivGp(rn, nper, pmt, pv, fv, when);\n\n    var diff = Math.abs(rnp1 - rn);\n    close = diff < tol;\n    iterator++;\n    rn = rnp1;\n  } // if exausted all the iterations and the result is not\n  // close enough, returns `NaN`\n\n\n  if (!close) {\n    return Number.NaN;\n  }\n\n  return rn;\n}\n/**\r\n * Return the Internal Rate of Return (IRR).\r\n *\r\n * This is the \"average\" periodically compounded rate of return\r\n * that gives a net present value of 0.0; for a more complete\r\n * explanation, see Notes below.\r\n *\r\n * @param values - Input cash flows per time period.\r\n *   By convention, net \"deposits\"\r\n *   are negative and net \"withdrawals\" are positive.  Thus, for\r\n *   example, at least the first element of `values`, which represents\r\n *   the initial investment, will typically be negative.\r\n * @param guess - Starting guess for solving the Internal Rate of Return\r\n * @param tol - Required tolerance for the solution\r\n * @param maxIter - Maximum iterations in finding the solution\r\n *\r\n * @returns Internal Rate of Return for periodic input values\r\n *\r\n * @since v0.0.17\r\n *\r\n * ## Notes\r\n *\r\n * The IRR is perhaps best understood through an example (illustrated\r\n * using `irr` in the Examples section below).\r\n *\r\n * Suppose one invests 100\r\n * units and then makes the following withdrawals at regular (fixed)\r\n * intervals: 39, 59, 55, 20.  Assuming the ending value is 0, one's 100\r\n * unit investment yields 173 units; however, due to the combination of\r\n * compounding and the periodic withdrawals, the \"average\" rate of return\r\n * is neither simply 0.73/4 nor (1.73)^0.25-1.\r\n * Rather, it is the solution (for `r`) of the equation:\r\n *\r\n * ```\r\n * -100 + 39/(1+r) + 59/((1+r)^2) + 55/((1+r)^3) + 20/((1+r)^4) = 0\r\n * ```\r\n *\r\n * In general, for `values` = `[0, 1, ... M]`,\r\n * `irr` is the solution of the equation:\r\n *\r\n * ```\r\n * \\\\sum_{t=0}^M{\\\\frac{v_t}{(1+irr)^{t}}} = 0\r\n * ```\r\n *\r\n * ## Example\r\n *\r\n * ```javascript\r\n * import { irr } from 'financial'\r\n *\r\n * irr([-100, 39, 59, 55, 20]) // 0.28095\r\n * irr([-100, 0, 0, 74]) // -0.0955\r\n * irr([-100, 100, 0, -7]) // -0.0833\r\n * irr([-100, 100, 0, 7]) // 0.06206\r\n * irr([-5, 10.5, 1, -8, 1]) // 0.0886\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * - L. J. Gitman, \"Principles of Managerial Finance, Brief,\" 3rd ed.,\r\n *  Addison-Wesley, 2003, pg. 348.\r\n */\n\nfunction irr(values, guess, tol, maxIter) {\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n\n  // Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n  // ASF licensed (check the link for the full license)\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Initialize dates and check that values contains at\n  // least one positive value and one negative value\n  var dates = [];\n  var positive = false;\n  var negative = false;\n\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = i === 0 ? 0 : dates[i - 1] + 365;\n\n    if (values[i] > 0) {\n      positive = true;\n    }\n\n    if (values[i] < 0) {\n      negative = true;\n    }\n  } // Return error if values does not contain at least one positive\n  // value and one negative value\n\n\n  if (!positive || !negative) {\n    return Number.NaN;\n  } // Initialize guess and resultRate\n\n\n  var resultRate = guess; // Implement Newton's method\n\n  var newRate, epsRate, resultValue;\n  var iteration = 0;\n  var contLoop = true;\n\n  do {\n    resultValue = _irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / _irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = epsRate > tol && Math.abs(resultValue) > tol;\n  } while (contLoop && ++iteration < maxIter);\n\n  if (contLoop) {\n    return Number.NaN;\n  } // Return internal rate of return\n\n\n  return resultRate;\n}\n/**\r\n * Returns the NPV (Net Present Value) of a cash flow series.\r\n *\r\n * @param rate - The discount rate\r\n * @param values - The values of the time series of cash flows.  The (fixed) time\r\n * interval between cash flow \"events\" must be the same as that for\r\n * which `rate` is given (i.e., if `rate` is per year, then precisely\r\n * a year is understood to elapse between each cash flow event).  By\r\n * convention, investments or \"deposits\" are negative, income or\r\n * \"withdrawals\" are positive; `values` must begin with the initial\r\n * investment, thus `values[0]` will typically be negative.\r\n * @returns The NPV of the input cash flow series `values` at the discount `rate`.\r\n *\r\n * @since v0.0.18\r\n *\r\n * ## Warnings\r\n *\r\n * `npv considers a series of cashflows starting in the present (t = 0).\r\n * NPV can also be defined with a series of future cashflows, paid at the\r\n * end, rather than the start, of each period. If future cashflows are used,\r\n * the first cashflow `values[0]` must be zeroed and added to the net\r\n * present value of the future cashflows. This is demonstrated in the\r\n * examples.\r\n *\r\n * ## Notes\r\n *\r\n * Returns the result of:\r\n *\r\n * ```\r\n * \\\\sum_{t=0}^{M-1}{\\\\frac{values_t}{(1+rate)^{t}}}\r\n * ```\r\n *\r\n * ## Examples\r\n *\r\n * Consider a potential project with an initial investment of $40 000 and\r\n * projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of\r\n * each period discounted at a rate of 8% per period. To find the project's\r\n * net present value:\r\n *\r\n * ```javascript\r\n * import {npv} from 'financial'\r\n *\r\n * const rate = 0.08\r\n * const cashflows = [-40_000, 5000, 8000, 12000, 30000]\r\n * npv(rate, cashflows) // 3065.2226681795255\r\n * ```\r\n *\r\n * It may be preferable to split the projected cashflow into an initial\r\n * investment and expected future cashflows. In this case, the value of\r\n * the initial cashflow is zero and the initial investment is later added\r\n * to the future cashflows net present value:\r\n *\r\n * ```javascript\r\n * const initialCashflow = cashflows[0]\r\n * cashflows[0] = 0\r\n *\r\n * npv(rate, cashflows) + initialCashflow // 3065.2226681795255\r\n * ```\r\n *\r\n * ## References\r\n *\r\n * L. J. Gitman, \"Principles of Managerial Finance, Brief,\"\r\n * 3rd ed., Addison-Wesley, 2003, pg. 346.\r\n */\n\nfunction npv(rate, values) {\n  return values.reduce(function (acc, curr, i) {\n    return acc + curr / Math.pow(1 + rate, i);\n  }, 0);\n}\n/**\r\n * Calculates the Modified Internal Rate of Return.\r\n *\r\n * @param values - Cash flows (must contain at least one positive and one negative\r\n *   value) or nan is returned.  The first value is considered a sunk\r\n *   cost at time zero.\r\n * @param financeRate - Interest rate paid on the cash flows\r\n * @param reinvestRate - Interest rate received on the cash flows upon reinvestment\r\n *\r\n * @returns Modified internal rate of return\r\n *\r\n * @since v0.1.0\r\n */\n\nfunction mirr(values, financeRate, reinvestRate) {\n  var positive = false;\n  var negative = false;\n\n  for (var i = 0; i < values.length; i++) {\n    if (values[i] > 0) {\n      positive = true;\n    }\n\n    if (values[i] < 0) {\n      negative = true;\n    }\n  } // Return error if values does not contain at least one\n  // positive value and one negative value\n\n\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n\n  var numer = Math.abs(npv(reinvestRate, values.map(function (x) {\n    return x > 0 ? x : 0;\n  })));\n  var denom = Math.abs(npv(financeRate, values.map(function (x) {\n    return x < 0 ? x : 0;\n  })));\n  return Math.pow(numer / denom, 1 / (values.length - 1)) * (1 + reinvestRate) - 1;\n}\n/**\r\n * This function is here to simply have a different name for the 'fv'\r\n * function to not interfere with the 'fv' keyword argument within the 'ipmt'\r\n * function.  It is the 'remaining balance on loan' which might be useful as\r\n * it's own function, but is easily calculated with the 'fv' function.\r\n *\r\n * @private\r\n */\n\nfunction _rbl(rate, per, pmt, pv, when) {\n  return fv(rate, per - 1, pmt, pv, when);\n}\n/**\r\n * Evaluates `g(r_n)/g'(r_n)`, where:\r\n *\r\n * ```\r\n * g = fv + pv * (1+rate) ** nper + pmt * (1+rate * when)/rate * ((1+rate) ** nper - 1)\r\n * ```\r\n *\r\n * @private\r\n */\n\n\nfunction _gDivGp(r, n, p, x, y, when) {\n  var w = when === PaymentDueTime.Begin ? 1 : 0;\n  var t1 = Math.pow(r + 1, n);\n  var t2 = Math.pow(r + 1, n - 1);\n  var g = y + t1 * x + p * (t1 - 1) * (r * w + 1) / r;\n  var gp = n * t2 * x - p * (t1 - 1) * (r * w + 1) / Math.pow(r, 2) + n * p * t2 * (r * w + 1) / r + p * (t1 - 1) * w / r;\n  return g / gp;\n}\n/**\r\n * Calculates the resulting amount.\r\n *\r\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\r\n * ASF licensed (check the link for the full license)\r\n *\r\n * @private\r\n */\n\n\nfunction _irrResult(values, dates, rate) {\n  var r = rate + 1;\n  var result = values[0];\n\n  for (var i = 1; i < values.length; i++) {\n    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n  }\n\n  return result;\n}\n/**\r\n * Calculates the first derivation\r\n *\r\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\r\n * ASF licensed (check the link for the full license)\r\n *\r\n * @private\r\n */\n\n\nfunction _irrResultDeriv(values, dates, rate) {\n  var r = rate + 1;\n  var result = 0;\n\n  for (var i = 1; i < values.length; i++) {\n    var frac = (dates[i] - dates[0]) / 365;\n    result -= frac * values[i] / Math.pow(r, frac + 1);\n  }\n\n  return result;\n}\n\nexport { PaymentDueTime, fv, ipmt, irr, mirr, nper, npv, pmt, ppmt, pv, rate };\n//# sourceMappingURL=financial.esm.js.map\n","import { pmt, ipmt } from 'financial'\n\nconst userLang = navigator.language || navigator.userLanguage; \nconst resultDiv = document.createElement('div');\nconst table = document.createElement('table');\n\nconst { __ } = wp.i18n;\n\nexport default class Calculator {\n\n\tconstructor( formEl ) {\n\t\tthis.amount = parseFloat( formEl.querySelector('[name=\"amount\"]').value );\n\t\tthis.rate = parseFloat( formEl.querySelector('[name=\"rate\"]').value/100 );\n\t\tthis.currency = document.createElement(\"small\");\n\t\tthis.currency = '<small>' + formEl.dataset.currency + '</small>';\n\t}\n\n\tpayment( term ) {\n\t\tlet result = pmt( this.rate/12, 12*term, this.amount )\n\t\treturn result*-1;\n\t}\n\n\tgenerateTableHead(table, data) {\n\t  let thead = table.createTHead();\n\t  let row = thead.insertRow();\n\t  for (let key of data) {\n\t    let th = document.createElement(\"th\");\n\t    let text = document.createTextNode(key);\n\t    th.appendChild(text);\n\t    row.appendChild(th);\n\t  }\n\t}\n\n\tgenerateTable(table, data) {\n\t  for (let element of data) {\n\t    let row = table.insertRow();\n\t    for (let key in element) {\n\t      let cell = row.insertCell();\n\t      cell.innerHTML = element[key];\n\t    }\n\t  }\n\t}\n\n\tresponse( elm ){\n\t\tlet parent = elm.parentNode;\n\t\tif( 'wp-block-columns' === parent.parentNode.className ){\n\t\t\telm = elm.parentNode.parentNode;\n\t\t}\n\n\t\tlet heads = [\n\t\t  __( 'Duration', 'mortgage' ), __( 'Monthly payment', 'mortgage' ), __( 'Interests', 'mortgage' ), __( 'Total', 'mortgage' ) \n\t\t];\n\n\t\tlet terms = [10,15,20,25,30]\n\t\tlet data = [];\n\t\tterms.forEach( (y) => {\n\t\t\tdata.push({ \n\t\t\t\tyears: y + __( ' Years', 'mortgage' ), \n\t\t\t\trecurring: this.formatNumber(this.payment(y)), \n\t\t\t\tinterests: this.formatNumber(this.payment(y)*12*y-this.amount), \n\t\t\t\ttotal: this.formatNumber(this.payment(y)*12*y), \n\t\t\t\tinterests: this.formatNumber(this.payment(y)*12*y-this.amount), \n\t\t\t})\n\t\t} )\n\t\t// reset table\n\t\ttable.innerHTML = '';\n\t\tthis.generateTableHead(table, heads);\n\t\tthis.generateTable(table, data);\n\n\t    resultDiv.className = 'wp-block-mortgage-table'\n\n\t\tresultDiv.appendChild( table )\n\t\telm.after( resultDiv )\n\n\t}\n\n\tformatNumber( val ){\n\t\treturn this.currency + val.toLocaleString( userLang, {\n\t\t\tminimumFractionDigits: 2,\n\t\t\tmaximumFractionDigits: 2\n\t\t})  \n\t}\n\n}","import Calculator from './calculator.js'\n\ndocument.addEventListener('submit', handleSubmitEvents, true) // useCapture=false to ensure we bubble upwards (and thus can cancel propagation)\n\nfunction handleSubmitEvents (e) {\n  const formEl = e.target\n  if (formEl.className.indexOf('wp-block-mortgage-form') < 0) {\n\treturn\n  }\n  // always prevent default (because regular submit doesn't work for Formello)\n  e.preventDefault()\n  e.stopPropagation()\n\n  if(formEl.reportValidity()){\n  \tlet calculator = new Calculator( formEl )\n  \tcalculator.response(formEl)\n  }\n\n}\n"],"sourceRoot":""}