{"version":3,"file":"table/view.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,SAAS;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,KAAK,KAAK,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI,GAAG,OAAO,KAAK,SAAS,KAAK;AAC3C;AACA;AACA;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,IAAI,EAAE,KAAK,OAAO,UAAU,UAAU;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,4BAA4B;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;;AAE+E;AAC/E;;;;;;;;;;;AChvBA;;;;;;SCAA;SACA;;SAEA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;SACA;;SAEA;SACA;;SAEA;SACA;SACA;;;;;UCtBA;UACA;UACA;UACA;UACA,yCAAyC,wCAAwC;UACjF;UACA;UACA;;;;;UCPA;;;;;UCAA;UACA;UACA;UACA,uDAAuD,iBAAiB;UACxE;UACA,gDAAgD,aAAa;UAC7D;;;;;;;;;;;ACNA;AACA;AACA;AACyE;AACnC;AAEtC,MAAMK,QAAQ,GAAGC,MAAM,CAA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","sources":["webpack://y/./node_modules/financial/dist/financial.esm.js","webpack://y/external module \"@wordpress/interactivity\"","webpack://y/webpack/bootstrap","webpack://y/webpack/runtime/define property getters","webpack://y/webpack/runtime/hasOwnProperty shorthand","webpack://y/webpack/runtime/make namespace object","webpack://y/./src/table/view.js"],"sourcesContent":["function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * When payments are due\n *\n * @since v0.0.12\n */\nvar PaymentDueTime;\n(function (PaymentDueTime) {\n  /** Payments due at the beginning of a period (1) */\n  PaymentDueTime[\"Begin\"] = \"begin\";\n  /** Payments are due at the end of a period (0) */\n  PaymentDueTime[\"End\"] = \"end\";\n})(PaymentDueTime || (PaymentDueTime = {}));\n/**\n * Compute the future value.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param nper - Number of compounding periods\n * @param pmt - A fixed payment, paid either at the beginning or ar the end (specified by `when`)\n * @param pv - Present value\n * @param when - When payment was made\n *\n * @returns The value at the end of the `nper` periods\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the future value after 10 years of saving $100 now, with\n * an additional monthly savings of $100. Assume the interest rate is\n * 5% (annually) compounded monthly?\n *\n * ```javascript\n * import { fv } from 'financial'\n *\n * fv(0.05 / 12, 10 * 12, -100, -100) // 15692.928894335748\n * ```\n *\n * By convention, the negative sign represents cash flow out (i.e. money not\n * available today).  Thus, saving $100 a month at 5% annual interest leads\n * to $15,692.93 available to spend in 10 years.\n *\n * ## Notes\n *\n * The future value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction fv(rate, nper, pmt, pv, when) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  if (isRateZero) {\n    return -(pv + pmt * nper);\n  }\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  return -pv * temp - pmt * (1 + rate * whenMult) / rate * (temp - 1);\n}\n/**\n * Compute the payment against loan principal plus interest.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods (e.g., number of payments)\n * @param pv - Present value (e.g., an amount borrowed)\n * @param fv - Future value (e.g., 0)\n * @param when - When payments are due\n *\n * @returns the (fixed) periodic payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the monthly payment needed to pay off a $200,000 loan in 15\n * years at an annual interest rate of 7.5%?\n *\n * ```javascript\n * import { pmt } from 'financial'\n *\n * pmt(0.075/12, 12*15, 200000) // -1854.0247200054619\n * ```\n *\n * In order to pay-off (i.e., have a future-value of 0) the $200,000 obtained\n * today, a monthly payment of $1,854.02 would be required.  Note that this\n * example illustrates usage of `fv` having a default value of 0.\n *\n * ## Notes\n *\n * The payment is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate*when) / rate * ((1 + rate) ** nper - 1) == 0\n * ```\n *\n * or, when `rate == 0`:\n *\n * ```\n * fv + pv + pmt * nper == 0\n * ```\n *\n * for `pmt`.\n *\n * Note that computing a monthly mortgage payment is only\n * one use for this function.  For example, `pmt` returns the\n * periodic deposit one must make to achieve a specified\n * future balance given an initial deposit, a fixed,\n * periodically compounded interest rate, and the total\n * number of periods.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction pmt(rate, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var maskedRate = isRateZero ? 1 : rate;\n  var fact = isRateZero ? nper : (1 + maskedRate * whenMult) * (temp - 1) / maskedRate;\n  return -(fv + pv * temp) / fact;\n}\n/**\n * Compute the number of periodic payments.\n *\n * @param rate - Rate of interest (per period)\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns The number of periodic payments\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * If you only had $150/month to pay towards the loan, how long would it take\n * to pay-off a loan of $8,000 at 7% annual interest?\n *\n * ```javascript\n * import { nper } from 'financial'\n *\n * Math.round(nper(0.07/12, -150, 8000), 5) // 64.07335\n * ```\n *\n * So, over 64 months would be required to pay off the loan.\n *\n * ## Notes\n *\n * The number of periods `nper` is computed by solving the equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper-1) = 0\n * ```\n *\n * but if `rate = 0` then:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n */\nfunction nper(rate, pmt, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var isRateZero = rate === 0;\n  if (isRateZero) {\n    return -(fv + pv) / pmt;\n  }\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var z = pmt * (1 + rate * whenMult) / rate;\n  return Math.log((-fv + z) / (pv + z)) / Math.log(1 + rate);\n}\n/**\n * Compute the interest portion of a payment.\n *\n * @param rate - Rate of interest as decimal (not per cent) per period\n * @param per - Interest paid against the loan changes during the life or the loan. The `per` is the payment period to calculate the interest amount\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns Interest portion of payment\n *\n * @since v0.0.12\n *\n * ## Examples\n *\n * What is the amortization schedule for a 1 year loan of $2500 at\n * 8.24% interest per year compounded monthly?\n *\n * ```javascript\n * const principal = 2500\n * const periods = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n * const ipmts = periods.map((per) => f.ipmt(0.0824 / 12, per, 1 * 12, principal))\n * expect(ipmts).toEqual([\n *   -17.166666666666668,\n *   -15.789337457350777,\n *   -14.402550587464257,\n *   -13.006241114404524,\n *   -11.600343649629737,\n *   -10.18479235559687,\n *   -8.759520942678298,\n *   -7.324462666057678,\n *   -5.879550322604295,\n *   -4.424716247725826,\n *   -2.9598923121998877,\n *   -1.4850099189833388\n * ])\n * const interestpd = ipmts.reduce((a, b) => a + b, 0)\n * expect(interestpd).toBeCloseTo(-112.98308424136215, 6)\n * ```\n *\n * The `periods` variable represents the periods of the loan.  Remember that financial equations start the period count at 1!\n *\n * ## Notes\n *\n * The total payment is made up of payment against principal plus interest.\n *\n * ```\n * pmt = ppmt + ipmt\n * ```\n */\nfunction ipmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  // Payments start at the first period, so payments before that\n  // don't make any sense.\n  if (per < 1) {\n    return Number.NaN;\n  }\n  // If payments occur at the beginning of a period and this is the\n  // first period, then no interest has accrued.\n  if (when === PaymentDueTime.Begin && per === 1) {\n    return 0;\n  }\n  var totalPmt = pmt(rate, nper, pv, fv, when);\n  var ipmtVal = _rbl(rate, per, totalPmt, pv, when) * rate;\n  // If paying at the beginning we need to discount by one period\n  if (when === PaymentDueTime.Begin && per > 1) {\n    ipmtVal = ipmtVal / (1 + rate);\n  }\n  return ipmtVal;\n}\n/**\n * Compute the payment against loan principal.\n *\n * @param rate - Rate of interest (per period)\n * @param per - Amount paid against the loan changes.  The `per` is the period of interest.\n * @param nper - Number of compounding periods\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the payment against loan principal\n *\n * @since v0.0.14\n */\nfunction ppmt(rate, per, nper, pv, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var total = pmt(rate, nper, pv, fv, when);\n  return total - ipmt(rate, per, nper, pv, fv, when);\n}\n/**\n * Calculates the present value of an annuity investment based on constant-amount\n * periodic payments and a constant interest rate.\n *\n * @param rate - Rate of interest (per period)\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param fv - Future value\n * @param when - When payments are due\n *\n * @returns the present value of a payment or investment\n *\n * @since v0.0.15\n *\n * ## Examples\n *\n * What is the present value (e.g., the initial investment)\n * of an investment that needs to total $15692.93\n * after 10 years of saving $100 every month?  Assume the\n * interest rate is 5% (annually) compounded monthly.\n *\n * ```javascript\n * import { pv } from 'financial'\n *\n * pv(0.05/12, 10*12, -100, 15692.93) // -100.00067131625819\n * ```\n *\n * By convention, the negative sign represents cash flow out\n * (i.e., money not available today).  Thus, to end up with\n * $15,692.93 in 10 years saving $100 a month at 5% annual\n * interest, one's initial deposit should also be $100.\n *\n * ## Notes\n *\n * The present value is computed by solving the equation:\n *\n * ```\n * fv + pv * (1 + rate) ** nper + pmt * (1 + rate * when) / rate * ((1 + rate) ** nper - 1) = 0\n * ```\n *\n * or, when `rate = 0`:\n *\n * ```\n * fv + pv + pmt * nper = 0\n * ```\n *\n * for `pv`, which is then returned.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction pv(rate, nper, pmt, fv, when) {\n  if (fv === void 0) {\n    fv = 0;\n  }\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  var whenMult = when === PaymentDueTime.Begin ? 1 : 0;\n  var isRateZero = rate === 0;\n  var temp = Math.pow(1 + rate, nper);\n  var fact = isRateZero ? nper : (1 + rate * whenMult) * (temp - 1) / rate;\n  return -(fv + pmt * fact) / temp;\n}\n/**\n * Compute the rate of interest per period\n *\n * @param nper - Number of compounding periods\n * @param pmt - Payment\n * @param pv - Present value\n * @param fv - Future value\n * @param when - When payments are due ('begin' or 'end')\n * @param guess - Starting guess for solving the rate of interest\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns the rate of interest per period (or `NaN` if it could\n *  not be computed within the number of iterations provided)\n *\n * @since v0.0.16\n *\n * ## Notes\n *\n * Use Newton's iteration until the change is less than 1e-6\n * for all values or a maximum of 100 iterations is reached.\n * Newton's rule is:\n *\n * ```\n * r_{n+1} = r_{n} - g(r_n)/g'(r_n)\n * ```\n *\n * where:\n *\n * - `g(r)` is the formula\n * - `g'(r)` is the derivative with respect to r.\n *\n *\n * The rate of interest is computed by iteratively solving the\n * (non-linear) equation:\n *\n * ```\n * fv + pv * (1+rate) ** nper + pmt * (1+rate * when) / rate * ((1+rate) ** nper - 1) = 0\n * ```\n *\n * for `rate.\n *\n * ## References\n *\n * [Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May)](http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt).\n */\nfunction rate(nper, pmt, pv, fv, when, guess, tol, maxIter) {\n  if (when === void 0) {\n    when = PaymentDueTime.End;\n  }\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n  var rn = guess;\n  var iterator = 0;\n  var close = false;\n  while (iterator < maxIter && !close) {\n    var rnp1 = rn - _gDivGp(rn, nper, pmt, pv, fv, when);\n    var diff = Math.abs(rnp1 - rn);\n    close = diff < tol;\n    iterator++;\n    rn = rnp1;\n  }\n  // if exausted all the iterations and the result is not\n  // close enough, returns `NaN`\n  if (!close) {\n    return Number.NaN;\n  }\n  return rn;\n}\n/**\n * Return the Internal Rate of Return (IRR).\n *\n * This is the \"average\" periodically compounded rate of return\n * that gives a net present value of 0.0; for a more complete\n * explanation, see Notes below.\n *\n * @param values - Input cash flows per time period.\n *   By convention, net \"deposits\"\n *   are negative and net \"withdrawals\" are positive.  Thus, for\n *   example, at least the first element of `values`, which represents\n *   the initial investment, will typically be negative.\n * @param guess - Starting guess for solving the Internal Rate of Return\n * @param tol - Required tolerance for the solution\n * @param maxIter - Maximum iterations in finding the solution\n *\n * @returns Internal Rate of Return for periodic input values\n *\n * @since v0.0.17\n *\n * ## Notes\n *\n * The IRR is perhaps best understood through an example (illustrated\n * using `irr` in the Examples section below).\n *\n * Suppose one invests 100\n * units and then makes the following withdrawals at regular (fixed)\n * intervals: 39, 59, 55, 20.  Assuming the ending value is 0, one's 100\n * unit investment yields 173 units; however, due to the combination of\n * compounding and the periodic withdrawals, the \"average\" rate of return\n * is neither simply 0.73/4 nor (1.73)^0.25-1.\n * Rather, it is the solution (for `r`) of the equation:\n *\n * ```\n * -100 + 39/(1+r) + 59/((1+r)^2) + 55/((1+r)^3) + 20/((1+r)^4) = 0\n * ```\n *\n * In general, for `values` = `[0, 1, ... M]`,\n * `irr` is the solution of the equation:\n *\n * ```\n * \\\\sum_{t=0}^M{\\\\frac{v_t}{(1+irr)^{t}}} = 0\n * ```\n *\n * ## Example\n *\n * ```javascript\n * import { irr } from 'financial'\n *\n * irr([-100, 39, 59, 55, 20]) // 0.28095\n * irr([-100, 0, 0, 74]) // -0.0955\n * irr([-100, 100, 0, -7]) // -0.0833\n * irr([-100, 100, 0, 7]) // 0.06206\n * irr([-5, 10.5, 1, -8, 1]) // 0.0886\n * ```\n *\n * ## References\n *\n * - L. J. Gitman, \"Principles of Managerial Finance, Brief,\" 3rd ed.,\n *  Addison-Wesley, 2003, pg. 348.\n */\nfunction irr(values, guess, tol, maxIter) {\n  if (guess === void 0) {\n    guess = 0.1;\n  }\n  if (tol === void 0) {\n    tol = 1e-6;\n  }\n  if (maxIter === void 0) {\n    maxIter = 100;\n  }\n  // Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n  // ASF licensed (check the link for the full license)\n  // Credits: algorithm inspired by Apache OpenOffice\n  // Initialize dates and check that values contains at\n  // least one positive value and one negative value\n  var dates = [];\n  var positive = false;\n  var negative = false;\n  for (var i = 0; i < values.length; i++) {\n    dates[i] = i === 0 ? 0 : dates[i - 1] + 365;\n    if (values[i] > 0) {\n      positive = true;\n    }\n    if (values[i] < 0) {\n      negative = true;\n    }\n  }\n  // Return error if values does not contain at least one positive\n  // value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n  // Initialize guess and resultRate\n  var resultRate = guess;\n  // Implement Newton's method\n  var newRate = 0;\n  var epsRate = 0;\n  var resultValue = 0;\n  var iteration = 0;\n  var contLoop = true;\n  do {\n    resultValue = _irrResult(values, dates, resultRate);\n    newRate = resultRate - resultValue / _irrResultDeriv(values, dates, resultRate);\n    epsRate = Math.abs(newRate - resultRate);\n    resultRate = newRate;\n    contLoop = epsRate > tol && Math.abs(resultValue) > tol;\n  } while (contLoop && ++iteration < maxIter);\n  if (contLoop) {\n    return Number.NaN;\n  }\n  // Return internal rate of return\n  return resultRate;\n}\n/**\n * Returns the NPV (Net Present Value) of a cash flow series.\n *\n * @param rate - The discount rate\n * @param values - The values of the time series of cash flows.  The (fixed) time\n * interval between cash flow \"events\" must be the same as that for\n * which `rate` is given (i.e., if `rate` is per year, then precisely\n * a year is understood to elapse between each cash flow event).  By\n * convention, investments or \"deposits\" are negative, income or\n * \"withdrawals\" are positive; `values` must begin with the initial\n * investment, thus `values[0]` will typically be negative.\n * @returns The NPV of the input cash flow series `values` at the discount `rate`.\n *\n * @since v0.0.18\n *\n * ## Warnings\n *\n * `npv considers a series of cashflows starting in the present (t = 0).\n * NPV can also be defined with a series of future cashflows, paid at the\n * end, rather than the start, of each period. If future cashflows are used,\n * the first cashflow `values[0]` must be zeroed and added to the net\n * present value of the future cashflows. This is demonstrated in the\n * examples.\n *\n * ## Notes\n *\n * Returns the result of:\n *\n * ```\n * \\\\sum_{t=0}^{M-1}{\\\\frac{values_t}{(1+rate)^{t}}}\n * ```\n *\n * ## Examples\n *\n * Consider a potential project with an initial investment of $40 000 and\n * projected cashflows of $5 000, $8 000, $12 000 and $30 000 at the end of\n * each period discounted at a rate of 8% per period. To find the project's\n * net present value:\n *\n * ```javascript\n * import {npv} from 'financial'\n *\n * const rate = 0.08\n * const cashflows = [-40_000, 5000, 8000, 12000, 30000]\n * npv(rate, cashflows) // 3065.2226681795255\n * ```\n *\n * It may be preferable to split the projected cashflow into an initial\n * investment and expected future cashflows. In this case, the value of\n * the initial cashflow is zero and the initial investment is later added\n * to the future cashflows net present value:\n *\n * ```javascript\n * const initialCashflow = cashflows[0]\n * cashflows[0] = 0\n *\n * npv(rate, cashflows) + initialCashflow // 3065.2226681795255\n * ```\n *\n * ## References\n *\n * L. J. Gitman, \"Principles of Managerial Finance, Brief,\"\n * 3rd ed., Addison-Wesley, 2003, pg. 346.\n */\nfunction npv(rate, values) {\n  return values.reduce(function (acc, curr, i) {\n    return acc + curr / Math.pow(1 + rate, i);\n  }, 0);\n}\n/**\n * Calculates the Modified Internal Rate of Return.\n *\n * @param values - Cash flows (must contain at least one positive and one negative\n *   value) or nan is returned.  The first value is considered a sunk\n *   cost at time zero.\n * @param financeRate - Interest rate paid on the cash flows\n * @param reinvestRate - Interest rate received on the cash flows upon reinvestment\n *\n * @returns Modified internal rate of return\n *\n * @since v0.1.0\n */\nfunction mirr(values, financeRate, reinvestRate) {\n  var positive = false;\n  var negative = false;\n  for (var _iterator = _createForOfIteratorHelperLoose(values), _step; !(_step = _iterator()).done;) {\n    var value = _step.value;\n    if (value > 0) {\n      positive = true;\n    }\n    if (value < 0) {\n      negative = true;\n    }\n  }\n  // Return error if values does not contain at least one\n  // positive value and one negative value\n  if (!positive || !negative) {\n    return Number.NaN;\n  }\n  var numer = Math.abs(npv(reinvestRate, values.map(function (x) {\n    return x > 0 ? x : 0;\n  })));\n  var denom = Math.abs(npv(financeRate, values.map(function (x) {\n    return x < 0 ? x : 0;\n  })));\n  return Math.pow(numer / denom, 1 / (values.length - 1)) * (1 + reinvestRate) - 1;\n}\n/**\n * This function is here to simply have a different name for the 'fv'\n * function to not interfere with the 'fv' keyword argument within the 'ipmt'\n * function.  It is the 'remaining balance on loan' which might be useful as\n * it's own function, but is easily calculated with the 'fv' function.\n *\n * @private\n */\nfunction _rbl(rate, per, pmt, pv, when) {\n  return fv(rate, per - 1, pmt, pv, when);\n}\n/**\n * Evaluates `g(r_n)/g'(r_n)`, where:\n *\n * ```\n * g = fv + pv * (1+rate) ** nper + pmt * (1+rate * when)/rate * ((1+rate) ** nper - 1)\n * ```\n *\n * @private\n */\nfunction _gDivGp(r, n, p, x, y, when) {\n  var w = when === PaymentDueTime.Begin ? 1 : 0;\n  var t1 = Math.pow(r + 1, n);\n  var t2 = Math.pow(r + 1, n - 1);\n  var g = y + t1 * x + p * (t1 - 1) * (r * w + 1) / r;\n  var gp = n * t2 * x - p * (t1 - 1) * (r * w + 1) / Math.pow(r, 2) + n * p * t2 * (r * w + 1) / r + p * (t1 - 1) * w / r;\n  return g / gp;\n}\n/**\n * Calculates the resulting amount.\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResult(values, dates, rate) {\n  var r = rate + 1;\n  var result = values[0];\n  for (var i = 1; i < values.length; i++) {\n    result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);\n  }\n  return result;\n}\n/**\n * Calculates the first derivation\n *\n * Based on https://gist.github.com/ghalimi/4591338 by @ghalimi\n * ASF licensed (check the link for the full license)\n *\n * @private\n */\nfunction _irrResultDeriv(values, dates, rate) {\n  var r = rate + 1;\n  var result = 0;\n  for (var i = 1; i < values.length; i++) {\n    var frac = (dates[i] - dates[0]) / 365;\n    result -= frac * values[i] / Math.pow(r, frac + 1);\n  }\n  return result;\n}\n\nexport { PaymentDueTime, fv, ipmt, irr, mirr, nper, npv, pmt, ppmt, pv, rate };\n//# sourceMappingURL=financial.esm.js.map\n","module.exports = __WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * WordPress dependencies\n */\nimport { store, getContext, getElement } from '@wordpress/interactivity';\nimport { ipmt, pmt } from 'financial';\n\nconst userLang = window.navigator.language || window.navigator.userLanguage;\n\nconst formatNumber = ( val ) => {\n\treturn val.toLocaleString( userLang, {\n\t\tminimumFractionDigits: 2,\n\t\tmaximumFractionDigits: 2,\n\t} );\n};\n\nconst calculator = ( fields ) => {\n\tconst result = pmt(\n\t\tfields.rate / 100 / fields.frequency,\n\t\tfields.frequency * fields.term,\n\t\tfields.amount\n\t);\n\treturn result * -1;\n};\n\nconst loanResponse = () => {\n\tconst data = [];\n\n\t// convert total payments to progressive array\n\tconst periods = Array.from(\n\t\t{ length: state.numberOfPayments },\n\t\t( _, i ) => i + 1\n\t);\n\tconst context = getContext();\n\n\tconst ipmts = periods.map( ( per ) =>\n\t\tipmt(\n\t\t\tcontext.rate / 100 / context.frequency,\n\t\t\tper,\n\t\t\t1 * periods.length,\n\t\t\tNumber( context.amount )\n\t\t)\n\t);\n\n\tlet balance = context.amount;\n\n\tfor ( let i = 0; i < ipmts.length; i++ ) {\n\t\tbalance = balance - context.result - ipmts[ i ];\n\n\t\tdata.push( {\n\t\t\t'#': i + 1,\n\t\t\tpayment: formatNumber( context.result ),\n\t\t\tinterest: formatNumber( ipmts[ i ] * -1 ),\n\t\t\tprincipal: formatNumber( context.result + ipmts[ i ] ),\n\t\t\tbalance: formatNumber( balance ),\n\t\t} );\n\t}\n\t// create table\n\tcontext.loanData = data;\n\tcontext.showTable = true;\n\tconst { ref } = getElement();\n\tconst resultDiv = ref.querySelector( '.wp-block-mortgage-result' );\n\tresultDiv?.scrollIntoView( { behavior: 'smooth' } );\n};\n\nconst ratesResponse = () => {\n\tconst context = getContext();\n\tif ( ! context.rate || ! context.amount ) {\n\t\treturn;\n\t}\n\n\tconst count = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\n\tconst data = [];\n\tconst rate = context.rate;\n\tcount.forEach( ( y ) => {\n\t\tcontext.rate = rate + context.increment * y;\n\t\tconst result = calculator( {\n\t\t\trate: context.rate,\n\t\t\tamount: context.amount,\n\t\t\tfrequency: 12,\n\t\t\tterm: context.term,\n\t\t} );\n\t\tdata.push( {\n\t\t\trate: context.rate.toFixed( 2 ),\n\t\t\tinstallment: formatNumber( result ),\n\t\t\tinterests: formatNumber(\n\t\t\t\tresult * 12 * context.term - context.amount\n\t\t\t),\n\t\t\ttotal: formatNumber( result * 12 * context.term ),\n\t\t} );\n\t} );\n\n\tcontext.rateData = data;\n\tcontext.showTable = true;\n};\n\nconst durationResponse = () => {\n\tconst context = getContext();\n\tif ( ! context.rate || ! context.amount ) {\n\t\treturn;\n\t}\n\tconst fields = {\n\t\trate: context.rate,\n\t\tamount: context.amount,\n\t\tfrequency: 12,\n\t\tterm: 10,\n\t};\n\tconst terms = [ 10, 15, 20, 25, 30, 35, 40 ];\n\tconst data = [];\n\tterms.forEach( ( y ) => {\n\t\tfields.term = y;\n\t\tconst result = calculator( fields );\n\t\tdata.push( {\n\t\t\tyears: y,\n\t\t\tinstallment: formatNumber( result ),\n\t\t\tinterests: formatNumber( result * 12 * y - context.amount ),\n\t\t\ttotal: formatNumber( result * 12 * y ),\n\t\t} );\n\t} );\n\tcontext.durationData = data;\n\tcontext.showTable = true;\n};\n\nconst { state } = store( 'mortgage', {\n\tcallbacks: {\n\t\tgenerateTable: () => {\n\t\t\tconst context = getContext();\n\t\t\tif ( context.result ) {\n\t\t\t\tcontext.showTable = true;\n\t\t\t}\n\n\t\t\tswitch ( context.type ) {\n\t\t\t\tcase 'loan':\n\t\t\t\t\tif ( ! context.result ) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tloanResponse();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'rates':\n\t\t\t\t\tratesResponse();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'duration':\n\t\t\t\t\tdurationResponse();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tloanResponse();\n\t\t\t}\n\t\t},\n\t},\n} );\n"],"names":["store","getContext","getElement","ipmt","pmt","userLang","window","navigator","language","userLanguage","formatNumber","val","toLocaleString","minimumFractionDigits","maximumFractionDigits","calculator","fields","result","rate","frequency","term","amount","loanResponse","data","periods","Array","from","length","state","numberOfPayments","_","i","context","ipmts","map","per","Number","balance","push","payment","interest","principal","loanData","showTable","ref","resultDiv","querySelector","scrollIntoView","behavior","ratesResponse","count","forEach","y","increment","toFixed","installment","interests","total","rateData","durationResponse","terms","years","durationData","callbacks","generateTable","type"],"sourceRoot":""}